sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

protObj(class, tag, size, attr) ::= <<
<class>_protObj:
    .word   <tag>
    .word   <size>
    .word   <class>_dispTab
<attr>
>>

dispTabEntry(func) ::= <<
     .word  <func>
>>

dispTab(class, funcs) ::= <<
<class>_dispTab:
<funcs>
>>

objTabEntry(class) ::= <<
     .word  <class>_protObj
     .word  <class>_init
>>

constInt(label, val, tag) ::= <<
int_const<label>:
        .word   <tag>
        .word   4
        .word   Int_dispTab
        .word   <val>
>>

constString(str, label, tag, l, wordCount) ::= <<
str_const<label>:
        .word   <tag>
        .word   <wordCount>
        .word   String_dispTab
        .word   <l>
        .asciiz "<str>"
        .align  2
>>

constBool(val, valInt, tag) ::= <<
bool_const_<val>:
        .word   <tag>
        .word   4
        .word   Bool_dispTab
        .word   <valInt>
>>

functionInit(class, parent, attrs) ::= <<
<class>_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
<if (parent)>
    jal     <parent>_init
<endif>
<attrs>
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
>>

tag(class, tag) ::= <<
_<class>_tag:
    .word   <tag>
>>

program(dispTabs, objTabs, protObjs, nameTabs, tags, constants, functions) ::= <<
.data
    .align  2
    .globl  class_nameTab
    .globl  Int_protObj
    .globl  String_protObj
    .globl  bool_const_false
    .globl  bool_const_true
    .globl  Main_protObj
    .globl  _int_tag
    .globl  _string_tag
    .globl  _bool_tag
    .globl  heap_start
<tags>
<constants>

class_nameTab:
<nameTabs>

class_objTab:
<objTabs>

<protObjs>

<dispTabs>

heap_start:
    .word   0

.text
    .globl  Int_init
    .globl  String_init
    .globl  Bool_init
    .globl  Main_init
    .globl  Main.main

<functions>
>>

function(class, name, body, nr) ::= <<
<class>.<name>:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
<body>
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp <nr>
    jr      $ra
>>

literal(addr) ::= <<
    la      $a0 <addr>
>>

attribInit(val, offset) ::= <<
<val>
    sw      $a0 <offset>($s0)
>>

param(name) ::= <<
<name>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
>>

explicitDispatch(i, params, offset, filename, line, caller, type) ::= <<
<params>
<if (caller)>
<caller>
<else>
	move    $a0 $s0
<endif>
    bnez    $a0 dispatch<i>
    la      $a0 <filename>
    li      $t1 <line>
    jal     _dispatch_abort

dispatch<i>:
<if (type)>
	la		$t1 <type>_dispTab
<else>
	lw      $t1 8($a0)
<endif>
    lw      $t1 <offset>($t1)
    jalr    $t1
>>

implicitDispatch(i, params, offset, filename, line) ::= <<
<params>
	move    $a0 $s0
    bnez    $a0 dispatch<i>
    la      $a0 <filename>
    li      $t1 <line>
    jal     _dispatch_abort

dispatch<i>:
	lw      $t1 8($a0)
    lw      $t1 <offset>($t1)
    jalr    $t1
>>

self() ::= <<
	move	$a0 $s0
>>

attribute(offset) ::= <<
    lw      $a0 <offset>($s0)
>>

local(offset) ::= <<
    lw      $a0 <offset>($fp)
>>

storeAttrib(val, offset) ::= <<
<val>
    sw      $a0 <offset>($s0)
>>

storeLocal(val, offset) ::= <<
<val>
    sw      $a0 <offset>($fp)
>>

if(cond, then, el, k) ::= <<
<cond>
    lw      $t1 12($a0)
    beqz    $t1 else<k>
<then>
    b       endif<k>
else<k>:
<el>
endif<k>:
>>

while(cond, body, k) ::= <<
while<k>:
<cond>
    lw      $t1 12($a0)
    beqz    $t1 endwhile<k>
<body>
    b       while<k>
endwhile<k>:
    li      $a0 0
>>

let(count) ::= <<
    addiu   $sp $sp <count>
>>

new(type) ::= <<
    la      $a0 <type>_protObj
    jal     Object.copy
    jal     <type>_init
>>

newSelf() ::= <<
    la      $t1 class_objTab
    lw      $t2 0($s0)
    sll     $t2 $t2 3
    addu    $t1 $t1 $t2
    sw      $t1 0($sp)
    addiu   $sp $sp -4
    lw      $a0 0($t1)
    jal     Object.copy
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 4($t1)
    jalr    $t1
>>

isVoid(expr, k) ::= <<
<expr>
    move    $t1 $a0
    la      $a0 bool_const_true
    beqz    $t1 isvoid<k>
    la      $a0 bool_const_false
isvoid<k>:
>>

not(expr, k) ::= <<
<expr>
    lw      $t1 12($a0)
    la      $a0 bool_const_true
    beqz    $t1 not<k>
    la      $a0 bool_const_false
not<k>:
>>

neg(expr) ::= <<
<expr>
    lw      $t1 12($a0)
    neg     $t1 $t1
    sw      $t1 12($a0)
>>

arithmeticOp(op, left, right) ::= <<
<left>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
<right>
    jal     Object.copy
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 12($t1)
    lw      $t2 12($a0)
    <op>    $t1 $t1 $t2
    sw      $t1 12($a0)
>>

eq(left, right, k) ::= <<
<left>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
<right>
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    move    $t2 $a0
    la      $a0 bool_const_true
    beq     $t1 $t2 eq<k>
    la      $a1 bool_const_false
    jal     equality_test
eq<k>:
>>

lt(op, left, right, k) ::= <<
<left>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
<right>
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 12($t1)
    lw      $t2 12($a0)
    la      $a0 bool_const_true
    <op>    $t1 $t2 compare<k>
    la      $a0 bool_const_false
compare<k>:
>>
